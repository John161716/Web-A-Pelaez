


import java.sql.*;  // For JDBC classes like Connection, PreparedStatement, SQLException
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Thresha
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form TicketBookingSystem
     */
    public MainForm() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        t1 = new javax.swing.JTextField();
        num1 = new javax.swing.JLabel();
        t2 = new javax.swing.JTextField();
        num2 = new javax.swing.JLabel();
        num3 = new javax.swing.JLabel();
        t3 = new javax.swing.JTextField();
        t4 = new javax.swing.JTextField();
        num4 = new javax.swing.JLabel();
        b4 = new javax.swing.JButton();
        b1 = new javax.swing.JButton();
        num5 = new javax.swing.JLabel();
        t5 = new javax.swing.JTextField();
        num6 = new javax.swing.JLabel();
        t6 = new javax.swing.JTextField();
        t7 = new javax.swing.JTextField();
        num7 = new javax.swing.JLabel();
        num8 = new javax.swing.JLabel();
        t8 = new javax.swing.JTextField();
        b2 = new javax.swing.JButton();
        b3 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        tab1 = new javax.swing.JTable();
        b5 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(51, 153, 255));

        t1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                t1ActionPerformed(evt);
            }
        });

        num1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num1.setText("Event ID:");
        num1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                num1MouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                num1MouseExited(evt);
            }
        });

        num2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num2.setText("Event Name:");

        num3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num3.setText("Event Date:");

        num4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num4.setText("Location:");

        b4.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b4.setText("Search");
        b4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b4ActionPerformed(evt);
            }
        });

        b1.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b1.setText("Save");
        b1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b1ActionPerformed(evt);
            }
        });

        num5.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num5.setText("Available Tickets:");

        num6.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num6.setText("Ticket Price:");

        num7.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num7.setText("Organizer:");

        num8.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        num8.setText("Description:");

        b2.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b2.setText("Update");
        b2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b2ActionPerformed(evt);
            }
        });

        b3.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        b3.setText("Delete");
        b3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b3ActionPerformed(evt);
            }
        });

        tab1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Event ID", "Event Name", "Event Date", "Location", "Available Tickets", "Ticket Price", "Organizer", "Description"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.Integer.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(tab1);

        b5.setText("Exit");
        b5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b5ActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("Simple Booking Ticket System");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(106, 106, 106)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 724, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(b4)
                        .addGap(31, 31, 31)
                        .addComponent(b1)
                        .addGap(46, 46, 46)
                        .addComponent(b2)
                        .addGap(51, 51, 51)
                        .addComponent(b3)
                        .addGap(44, 44, 44)
                        .addComponent(b5))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(num1, javax.swing.GroupLayout.PREFERRED_SIZE, 71, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(num3, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(num2))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(3, 3, 3)
                                .addComponent(num4, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(58, 58, 58)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(173, 173, 173)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(num5)
                            .addComponent(num6)
                            .addComponent(num7, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(num8, javax.swing.GroupLayout.PREFERRED_SIZE, 69, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(56, 56, 56)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(t8, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t7, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t6, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 348, Short.MAX_VALUE)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 405, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(618, 618, 618))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(num1)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(num5)
                        .addComponent(t5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(num2)
                    .addComponent(t2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(num6)
                    .addComponent(t6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(num3)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(t3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(t7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(num7)))
                .addGap(29, 29, 29)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(num4)
                    .addComponent(t4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(num8)
                    .addComponent(t8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 47, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(b3)
                    .addComponent(b2)
                    .addComponent(b1)
                    .addComponent(b4)
                    .addComponent(b5))
                .addGap(40, 40, 40)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(166, 166, 166))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(541, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(195, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void t1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_t1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_t1ActionPerformed

    private void b3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b3ActionPerformed
      Connection conn = DBconnection.getConnection();
if (conn != null) {
    try {
        // Prepare SQL query with WHERE clause to delete based on event_id
        String sql = "DELETE FROM events WHERE event_id = ?";
        PreparedStatement pstmt = conn.prepareStatement(sql);

        // Set the parameter for event_id (assuming it's an integer)
        pstmt.setInt(1, Integer.parseInt(t1.getText())); // t1 is the field for Event ID

        // Execute the DELETE query
        int rowsDeleted = pstmt.executeUpdate();
        if (rowsDeleted > 0) {
            // Success: Event deleted
            JOptionPane.showMessageDialog(null, "The event was deleted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            // Error: No record found with the specified event_id
            JOptionPane.showMessageDialog(null, "No record found with the specified Event ID.", "Error", JOptionPane.WARNING_MESSAGE);
        }

        // Close PreparedStatement
        pstmt.close();
    } catch (SQLException e) {
        // SQL error handling
        JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Close the connection
        DBconnection.closeConnection(conn);
    }
} else {
    // Connection error
    JOptionPane.showMessageDialog(null, "Failed to connect to the database.", "Connection Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_b3ActionPerformed

    private void num1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_num1MouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_num1MouseExited

    private void num1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_num1MouseClicked

    }//GEN-LAST:event_num1MouseClicked

    private void b1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b1ActionPerformed
Connection conn = DBconnection.getConnection();
if (conn != null) {
    try {
        // Validate input fields
        String eventID = t1.getText().trim();
        String eventName = t2.getText().trim();
        String eventDate = t3.getText().trim();
        String location = t4.getText().trim();
        String availableTickets = t5.getText().trim(); // Available Tickets
        String ticketPrice = t6.getText().trim(); // Ticket Price
        String organizer = t7.getText().trim();
        String description = t8.getText().trim();

        // Input validation
        if (eventName.isEmpty() || location.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Both Event Name and Location are required.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (availableTickets.isEmpty() || ticketPrice.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Available Tickets and Ticket Price are required.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (eventDate.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Event Date is required.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate and parse Available Tickets and Ticket Price
        int tickets = 0;
        double price = 0.0;

        try {
            tickets = Integer.parseInt(availableTickets); // Convert Available Tickets to integer
            price = Double.parseDouble(ticketPrice); // Convert Ticket Price to double
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter valid numeric values for Available Tickets and Ticket Price.", "Input Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Validate date format (yyyy-MM-dd)
        try {
            Date.valueOf(eventDate); // Check for valid date format
        } catch (IllegalArgumentException e) {
            JOptionPane.showMessageDialog(null, "Invalid date format. Please use yyyy-MM-dd format.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        // Prepare SQL query to insert event details
        String sql = "INSERT INTO events (event_name, event_date, location, available_tickets, ticket_price, organizer, description) "
                     + "VALUES (?, ?, ?, ?, ?, ?, ?)";
        PreparedStatement pstmt = conn.prepareStatement(sql);

        // Set the parameters for the query
        pstmt.setString(1, eventName);
        pstmt.setDate(2, Date.valueOf(eventDate));  // Assumes format yyyy-MM-dd
        pstmt.setString(3, location);
        pstmt.setInt(4, tickets); // Available Tickets as integer
        pstmt.setDouble(5, price); // Ticket Price as double
        pstmt.setString(6, organizer);
        pstmt.setString(7, description);

        // Execute the insert statement
        int rowsInserted = pstmt.executeUpdate();
        if (rowsInserted > 0) {
            JOptionPane.showMessageDialog(null, "Event inserted successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
            // Optionally reset the form or disable input fields after success
        } else {
            JOptionPane.showMessageDialog(null, "Failed to insert the event.", "Insertion Failed", JOptionPane.WARNING_MESSAGE);
        }

        pstmt.close();
    } catch (SQLException e) {
        JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    } catch (IllegalArgumentException e) {
        JOptionPane.showMessageDialog(null, "Invalid date format. Please use yyyy-MM-dd format.", "Date Format Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        DBconnection.closeConnection(conn);
    }
} else {
    JOptionPane.showMessageDialog(null, "Failed to connect to the database.", "Connection Error", JOptionPane.ERROR_MESSAGE);
}


    }//GEN-LAST:event_b1ActionPerformed

    private void b2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b2ActionPerformed
         String eventID = t1.getText().trim();
String eventName = t2.getText().trim();
String eventDate = t3.getText().trim();
String location = t4.getText().trim();
String availableTickets = t5.getText().trim();
String ticketPrice = t6.getText().trim();
String organizer = t7.getText().trim();
String description = t8.getText().trim(); // Assuming description is in t9

// Validate the required fields
if (eventID.isEmpty() || eventName.isEmpty() || eventDate.isEmpty() || location.isEmpty() ||
    availableTickets.isEmpty() || ticketPrice.isEmpty() || organizer.isEmpty()) {
    JOptionPane.showMessageDialog(null, "Event ID, Event Name, Event Date, Location, Available Tickets, Ticket Price, and Organizer are required fields.", "Input Error", JOptionPane.ERROR_MESSAGE);
    return; // Stop the execution if validation fails
}

Connection conn = DBconnection.getConnection();
if (conn != null) {
    try {
        // Prepare the SQL query to update the event record
        String sql = "UPDATE events SET " +
                     "event_name = ?, event_date = ?, location = ?, available_tickets = ?, ticket_price = ?, " +
                     "organizer = ?, description = ? " +
                     "WHERE event_id = ?";  // Use event_id to identify which record to update

        PreparedStatement pstmt = conn.prepareStatement(sql);

        // Set the parameters for the update
        pstmt.setString(1, eventName);
        pstmt.setString(2, eventDate);
        pstmt.setString(3, location);
        pstmt.setString(4, availableTickets);
        pstmt.setString(5, ticketPrice);
        pstmt.setString(6, organizer);
        pstmt.setString(7, description);
        pstmt.setString(8, eventID);  // Event ID to match the record to update

        // Execute the update query
        int rowsUpdated = pstmt.executeUpdate();
        if (rowsUpdated > 0) {
            JOptionPane.showMessageDialog(null, "Event details updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } else {
            JOptionPane.showMessageDialog(null, "No record found with the specified Event ID.", "Error", JOptionPane.WARNING_MESSAGE);
        }

        // Close the PreparedStatement
        pstmt.close();
    } catch (SQLException e) {
        // SQL error handling
        JOptionPane.showMessageDialog(null, "SQL Error: " + e.getMessage(), "Database Error", JOptionPane.ERROR_MESSAGE);
    } finally {
        // Close the connection
        DBconnection.closeConnection(conn);
    }
} else {
    // Connection error
    JOptionPane.showMessageDialog(null, "Failed to connect to the database.", "Connection Error", JOptionPane.ERROR_MESSAGE);
}

    }//GEN-LAST:event_b2ActionPerformed

    private void b4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b4ActionPerformed
   Connection conn = DBconnection.getConnection();
if (conn != null) {
    try {
        String sql;
        PreparedStatement pstmt;

        // Check if Event ID is empty
        if (t1.getText().trim().isEmpty()) {
            sql = "SELECT * FROM events";  // Select all records if Event ID is empty
            pstmt = conn.prepareStatement(sql);
        } else {
            sql = "SELECT * FROM events WHERE event_id = ?";  // Select specific event by Event ID
            pstmt = conn.prepareStatement(sql);
            pstmt.setInt(1, Integer.parseInt(t1.getText()));  // Set the event_id parameter
        }

        // Execute the query and retrieve results
        try (ResultSet rs = pstmt.executeQuery()) {
            DefaultTableModel model = (DefaultTableModel) tab1.getModel();
            model.setRowCount(0);  // Clear existing rows

            // Iterate through result set and add data to table
            while (rs.next()) {
                int eventId = rs.getInt("event_id");
                String eventName = rs.getString("event_name");
                String eventDate = rs.getString("event_date");
                String location = rs.getString("location");
                int availableTickets = rs.getInt("available_tickets");
                double ticketPrice = rs.getDouble("ticket_price");
                String organizer = rs.getString("organizer");
                String description = rs.getString("description");

                // Add row to the table model
                model.addRow(new Object[]{
                        eventId, eventName, eventDate, location, availableTickets, ticketPrice, organizer, description
                });
            }
        } catch (SQLException e) {
            System.out.println("Error executing query: " + e.getMessage());
        }

    } catch (SQLException e) {
        System.out.println("SQL Error: " + e.getMessage());
    } finally {
        DBconnection.closeConnection(conn);  // Ensure the connection is closed
    }
} else {
    System.out.println("Failed to connect to the database.");
}

    }//GEN-LAST:event_b4ActionPerformed

    private void b5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b5ActionPerformed
        System.exit(0);
    }//GEN-LAST:event_b5ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger( MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger( MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger( MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger( MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MainForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b1;
    private javax.swing.JButton b2;
    private javax.swing.JButton b3;
    private javax.swing.JButton b4;
    private javax.swing.JButton b5;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JLabel num1;
    private javax.swing.JLabel num2;
    private javax.swing.JLabel num3;
    private javax.swing.JLabel num4;
    private javax.swing.JLabel num5;
    private javax.swing.JLabel num6;
    private javax.swing.JLabel num7;
    private javax.swing.JLabel num8;
    private javax.swing.JTextField t1;
    private javax.swing.JTextField t2;
    private javax.swing.JTextField t3;
    private javax.swing.JTextField t4;
    private javax.swing.JTextField t5;
    private javax.swing.JTextField t6;
    private javax.swing.JTextField t7;
    private javax.swing.JTextField t8;
    private javax.swing.JTable tab1;
    // End of variables declaration//GEN-END:variables
}
